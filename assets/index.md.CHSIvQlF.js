import{_ as a,c as n,o as e,ae as l}from"./chunks/framework.oxQ2x61N.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"relatix","tagline":"Manage relational data effortlessly and safely in TypeScript","actions":[{"theme":"brand","text":"Get Started","link":"/en/intro"},{"theme":"outline","text":"GitHub","link":"https://github.com/relatix-js/relatix"}]},"features":[{"title":"🔒 Strong Type Safety","details":"Catch data structure and reference errors at compile time, not runtime. Zero hidden `any` for reliable code."},{"title":"✨ Declarative & Fluent API","details":"Define tables, fields (Text, Number), and relationships (Ref, SelfRef) intuitively. Build models step-by-step."},{"title":"🔧 Rich Utilities Included","details":"Query (`select`), mutate (`commit`), create (`create`), and resolve nested references (`deepSelect`) out-of-the-box."},{"title":"🚀 Optimized Reads","details":"Memoized selectors (`select`) ensure efficient data retrieval, recalculating only when necessary."}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),o={name:"index.md"};function p(t,s,c,r,D,i){return e(),n("div",null,s[0]||(s[0]=[l(`<h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><p>Install <code>relatix</code> using npm:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#CE9178;"> install</span><span style="color:#CE9178;"> relatix</span></span></code></pre></div><h2 id="quick-example-task-management-model" tabindex="-1">Quick Example: Task Management Model <a class="header-anchor" href="#quick-example-task-management-model" aria-label="Permalink to &quot;Quick Example: Task Management Model&quot;">​</a></h2><p>Define people, projects, and tasks with relationships in a type-safe manner:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Tables</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Text</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Ref</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">SelfRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;relatix&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 1. Define the Model Structure</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">tables</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">select</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">initIds</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">Tables</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">addTables</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#6A9955;">    // Define standalone tables first</span></span>
<span class="line"><span style="color:#9CDCFE;">    People:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      name:</span><span style="color:#9CDCFE;"> Text</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      age:</span><span style="color:#9CDCFE;"> Number</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">      // Optional self-reference (e.g., manager, peer)</span></span>
<span class="line"><span style="color:#9CDCFE;">      reportsTo:</span><span style="color:#9CDCFE;"> SelfRef</span><span style="color:#C586C0;"> as</span><span style="color:#569CD6;"> typeof</span><span style="color:#9CDCFE;"> SelfRef</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    Projects:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      title:</span><span style="color:#9CDCFE;"> Text</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">addTables</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">Ref</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#6A9955;">    // Define tables referencing existing ones</span></span>
<span class="line"><span style="color:#9CDCFE;">    Tasks:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      title:</span><span style="color:#9CDCFE;"> Text</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      assignedTo:</span><span style="color:#DCDCAA;"> Ref</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;People&quot;</span><span style="color:#D4D4D4;">), </span><span style="color:#6A9955;">// Strongly-typed reference to People table</span></span>
<span class="line"><span style="color:#9CDCFE;">      project:</span><span style="color:#DCDCAA;"> Ref</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Projects&quot;</span><span style="color:#D4D4D4;">), </span><span style="color:#6A9955;">// Strongly-typed reference to Projects table</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  }))</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">populate</span><span style="color:#D4D4D4;">(({ </span><span style="color:#9CDCFE;">People</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Projects</span><span style="color:#D4D4D4;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> ({</span></span>
<span class="line"><span style="color:#6A9955;">    // 2. Populate with Initial Data (Type-checked!)</span></span>
<span class="line"><span style="color:#9CDCFE;">    People:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      alice:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Alice&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 30</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reportsTo:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#9CDCFE;">      bob:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;Bob&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 42</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reportsTo:</span><span style="color:#DCDCAA;"> People</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;alice&quot;</span><span style="color:#D4D4D4;">) }, </span><span style="color:#6A9955;">// Refers to &#39;alice&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    Projects:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      launch:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">title:</span><span style="color:#CE9178;"> &quot;Website Launch&quot;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;">    Tasks:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      task1:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        title:</span><span style="color:#CE9178;"> &quot;Design Homepage&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        assignedTo:</span><span style="color:#DCDCAA;"> People</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;alice&quot;</span><span style="color:#D4D4D4;">), </span><span style="color:#6A9955;">// Refers to &#39;alice&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">        project:</span><span style="color:#DCDCAA;"> Projects</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;launch&quot;</span><span style="color:#D4D4D4;">), </span><span style="color:#6A9955;">// Refers to &#39;launch&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">      },</span></span>
<span class="line"><span style="color:#9CDCFE;">      task2:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        title:</span><span style="color:#CE9178;"> &quot;Develop API&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        assignedTo:</span><span style="color:#DCDCAA;"> People</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;bob&quot;</span><span style="color:#D4D4D4;">), </span><span style="color:#6A9955;">// Refers to &#39;bob&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">        project:</span><span style="color:#DCDCAA;"> Projects</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;launch&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">      },</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  }))</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">done</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// Finalize and get utilities</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 3. Use the Model &amp; Utilities</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> aliceId</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">initIds</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">People</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">alice</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// Get Alice&#39;s generated ID</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> aliceData</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">select</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">People</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">byId</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">tables</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">aliceId</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`Selected Person: </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">aliceData</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// Output: Selected Person: Alice</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// TypeScript Error Example:</span></span>
<span class="line"><span style="color:#6A9955;">// const invalidTask = { title: &quot;Invalid&quot;, assignedTo: People(&quot;nonExistent&quot;), project: Projects(&quot;launch&quot;) };</span></span>
<span class="line"><span style="color:#6A9955;">// The line above would cause a TypeScript error during &#39;.populate&#39; because &quot;nonExistent&quot; isn&#39;t defined.</span></span></code></pre></div><h2 id="advanced-capabilities-🛠️" tabindex="-1">Advanced Capabilities 🛠️ <a class="header-anchor" href="#advanced-capabilities-🛠️" aria-label="Permalink to &quot;Advanced Capabilities 🛠️&quot;">​</a></h2><ul><li><strong>Deep Data Resolution</strong>: Use <code>deepSelect</code> to retrieve entries with all nested references automatically resolved into full data objects.</li><li><strong>Fine-grained Mutations</strong>: Perform atomic create, update, delete operations on your tables using the <code>commit</code> utility, ensuring data integrity.</li><li><strong>Customizable IDs &amp; Labels</strong>: Tailor entry <code>id</code> and <code>label</code> generation using <code>TableOptions</code> for debugging or specific requirements.</li><li><strong>Complex Relationships</strong>: Easily model intricate data structures, including self-referencing tables (<code>SelfRef</code>) and multiple references between tables.</li></ul><hr><p class="home-footer"><a href="https://www.npmjs.com/package/relatix" target="_blank">NPM</a> • <a href="https://github.com/relatixjs/relatix" target="_blank">GitHub</a> • </p>`,10)]))}const d=a(o,[["render",p]]);export{C as __pageData,d as default};
