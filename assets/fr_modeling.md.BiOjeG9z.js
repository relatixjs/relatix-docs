import{_ as e,c as a,o as n,ae as l}from"./chunks/framework.oxQ2x61N.js";const u=JSON.parse('{"title":"Méthodes de construction du modèle","description":"","frontmatter":{},"headers":[],"relativePath":"fr/modeling.md","filePath":"fr/modeling.md"}'),o={name:"fr/modeling.md"};function p(t,s,c,r,i,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="methodes-de-construction-du-modele" tabindex="-1">Méthodes de construction du modèle <a class="header-anchor" href="#methodes-de-construction-du-modele" aria-label="Permalink to &quot;Méthodes de construction du modèle&quot;">​</a></h1><h2 id="addtables-tablesconstructor" tabindex="-1"><code>.addTables(TablesConstructor)</code> <a class="header-anchor" href="#addtables-tablesconstructor" aria-label="Permalink to &quot;\`.addTables(TablesConstructor)\`&quot;">​</a></h2><p>La méthode <code>.addTables</code> chaînée à Tables accepte:</p><ul><li><p>un objet constructeur de tables :</p><ul><li>ses clés sont les noms des tables</li><li>ses valeurs des objets sérialisables dont chaque clé représente un champ, et chaque valeur décrit son type</li></ul><p>Les champs sont typés par inférence. Il est possible d&#39;ajouter des annotations de type explicites pour les cas plus complexes (ex. type union).</p></li><li><p>une fonction de <code>callback</code> dont le paramètre est un constructeur de référence, qui accepte une clé des tables précédemment définies, dont il permet de vérifier l&#39;existence et renvoie un constructeur de tables.</p></li></ul><h3 id="typers" tabindex="-1">Typers <a class="header-anchor" href="#typers" aria-label="Permalink to &quot;Typers&quot;">​</a></h3><p>Pour une meilleure compréhension de l&#39;intentionalité du code, <code>relatix</code> exporte des constantes typées pour décrire les champs : les <code>Typers</code>.</p><p>Le code :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Text</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">SelfRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;relatix&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> model</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Tables</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">addTables</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  People:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#9CDCFE;"> Text</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#9CDCFE;"> Number</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    favouriteCoWorker:</span><span style="color:#9CDCFE;"> SelfRef</span><span style="color:#C586C0;"> as</span><span style="color:#569CD6;"> typeof</span><span style="color:#9CDCFE;"> SelfRef</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#9CDCFE;">  Projects:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">title:</span><span style="color:#9CDCFE;"> Text</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">description:</span><span style="color:#9CDCFE;"> Text</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>est exactement équivalent à :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">SelfRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;relatix&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// typage par inférence grâce à des sample values</span></span>
<span class="line"><span style="color:#6A9955;">// ces valeurs servent uniquement à des fins de typage et ne sont pas réutilisées</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> model</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Tables</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">addTables</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  People:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;John&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">favouriteCoWorker:</span><span style="color:#9CDCFE;"> SelfRef</span><span style="color:#D4D4D4;"> | </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#9CDCFE;">  Projects:</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">title:</span><span style="color:#CE9178;"> &quot;Some project&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">description:</span><span style="color:#CE9178;"> &quot;Project description&quot;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre></div><p>Dans les deux cas, les membres de <code>People</code> et <code>Projects</code> sont typés comme :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> People</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  favouriteCoWorker</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> SelfRef</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> Project</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  title</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  description</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre></div><p>La première version est cependant plus claire : elle évite de potentielles confusions sur le rôle des sample values.</p><p>Les <code>Typers</code> sont des constantes exportées par <code>tables</code> et leurs valeurs sont :</p><ul><li>Text: &quot;&quot;</li><li>Number: 1.0</li></ul><p>Pour une meilleure lisibilité et pour éviter toute ambiguïté, préférez toujours les Typers (Text, Number) aux valeurs d’exemple pour décrire le modèle de vos tables.</p><h3 id="selfref" tabindex="-1"><code>SelfRef</code> <a class="header-anchor" href="#selfref" aria-label="Permalink to &quot;\`SelfRef\`&quot;">​</a></h3><p>La constante <code>SelfRef</code> exportée depuis <code>relatix</code> permet d&#39;indiquer une référence d&#39;un champ de la table vers une autre instance de la même table.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">SelfRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &quot;relatix&quot;</span><span style="color:#D4D4D4;">;</span></span></code></pre></div><p>Dans <code>.populate</code> le champ <code>favouriteCoWorker</code> attendra une référence vers un autre membre de la table <code>People</code>, ou <code>null</code>.</p><h3 id="ref-tablekey" tabindex="-1"><code>Ref(tableKey)</code> <a class="header-anchor" href="#ref-tablekey" aria-label="Permalink to &quot;\`Ref(tableKey)\`&quot;">​</a></h3><p><code>Ref</code> est le paramètre du <code>callback</code> de <code>.addTables</code>. Il accepte comme paramètre le nom d&#39;une des tables déjà définies.</p><p>La valeur attendue par <code>Ref</code> est fortement typée : dans la définition de la table <code>Tasks</code> tout autre référence que Ref(&quot;People&quot;) ou Ref(&quot;Projects&quot;) sera rejetée par Typescript.</p><h2 id="populate-callback" tabindex="-1"><code>.populate(callback)</code> <a class="header-anchor" href="#populate-callback" aria-label="Permalink to &quot;\`.populate(callback)\`&quot;">​</a></h2><p>Peuple les tables avec des données spécifiques en utilisant des références à partir d&#39;une fonction callback.</p><p>Cette fonction reçoit en argument un objet contenant des constructeurs de références vers les tables précédemment définies.</p><p>Les valeurs des références sont également fortement typées :</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#C8C8C8;">Tasks</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#C8C8C8;">  task1</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#C8C8C8;">    title</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;Design Homepage&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#C8C8C8;">    assignedTo</span><span style="color:#D4D4D4;">: </span><span style="color:#DCDCAA;">People</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;charlie&quot;</span><span style="color:#D4D4D4;">), </span><span style="color:#6A9955;">// ❌ Erreur : &quot;charlie&quot; n&#39;existe pas dans People</span></span>
<span class="line"><span style="color:#C8C8C8;">    project</span><span style="color:#D4D4D4;">: </span><span style="color:#DCDCAA;">Projects</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;proj1&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">},</span></span></code></pre></div><p>Toute tentative d’ajouter une valeur non conforme entraîne une erreur Typescript avant même l’exécution du code.</p><h2 id="done" tabindex="-1"><code>.done()</code> <a class="header-anchor" href="#done" aria-label="Permalink to &quot;\`.done()\`&quot;">​</a></h2><p>Finalise la création du modèle en renvoyant des utilitaires pratiques permettant d&#39;interagir avec les tables créées.</p><p>Retourne notamment :</p><ul><li><code>tables</code>: les tables définies</li><li><code>initIds</code>: mapping entre les clés de populate (état initial) et leurs ids</li><li><code>create</code>: contient un créateur d&#39;entrée pour chaque table</li><li><code>select</code>: sélecteurs memoïsés pour les entrées</li><li><code>commit</code>: permet d&#39;effectuer des opérations create-update-delete sur le modèle</li><li><code>deepSelect</code>: sélecteurs pour les entrées en résolvant les référeces</li></ul><p>Chacun de ces éléments sont présentés en détails dans la partie suivante.</p>`,34)]))}const y=e(o,[["render",p]]);export{u as __pageData,y as default};
