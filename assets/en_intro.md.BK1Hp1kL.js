import{_ as t,c as o,o as a,ae as i}from"./chunks/framework.oxQ2x61N.js";const h=JSON.parse('{"title":"Introduction to relatix","description":"","frontmatter":{},"headers":[],"relativePath":"en/intro.md","filePath":"en/intro.md"}'),n={name:"en/intro.md"};function r(l,e,s,c,d,u){return a(),o("div",null,e[0]||(e[0]=[i('<h1 id="introduction-to-relatix" tabindex="-1">Introduction to relatix <a class="header-anchor" href="#introduction-to-relatix" aria-label="Permalink to &quot;Introduction to relatix&quot;">​</a></h1><p><strong><code>relatix</code> makes it easy to create and manipulate relational data in TypeScript.</strong></p><p>Create, link, and query your tables effortlessly without compromising type safety. Its clear, intuitive syntax lets you define interconnected tables and populate them with consistent data thanks to strong typing of the initial state.</p><h2 id="why-choose-relatix" tabindex="-1">Why choose relatix? <a class="header-anchor" href="#why-choose-relatix" aria-label="Permalink to &quot;Why choose relatix?&quot;">​</a></h2><p>✅ <strong>Declarative modelling</strong></p><ul><li>Define your tables and their relationships in just a few lines using Typers (<code>Text</code>, <code>Number</code>, <code>SelfRef</code>, <code>Ref</code>).</li><li>References are verified at compile‑time.</li></ul><p>✅ <strong>Strong, automatic typing</strong></p><ul><li>Table schemas, refs, selectors, and commits are all generated by inference.</li><li>Zero hidden <code>any</code>: your IDE and CI catch inconsistencies before runtime.</li></ul><p>✅ <strong>Smooth, fluent workflow</strong></p><ul><li>Build your tables step by step: <code>.addTables()</code> accepts refs to tables already defined.</li><li><code>.populate()</code> injects coherent, type‑checked data with ease.</li></ul><p>✅ <strong>&quot;Batteries‑included&quot; utilities</strong></p><ul><li><code>select</code>, <code>deepSelect</code>, <code>create</code>, <code>commit</code>… everything you need to read, mutate, or navigate your data is ready out of the box.</li><li>Customise id and label generation with <code>TableOptions</code> for clearer debugging.</li></ul><p>✅ <strong>Performance and maintainability</strong></p><ul><li>Memoised selectors: recalculated only when the target table changes.</li></ul>',14)]))}const m=t(n,[["render",r]]);export{h as __pageData,m as default};
